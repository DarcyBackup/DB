<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFtbthxWVrZlV1e4qFhYt8xXV7fkVla341dXt8dXV7eqVla2ZVlZvBcAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFlZuCtXV7ekV1e3+1dXt/9XV7f/V1e3/1dXt/9XV7f/V1e3/1dXt/9XV7f/V1e3/VhY
        t6lVVbgkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAICAgAJYWLZ3V1e3+VdXt/9XV7f/V1e3/1dXt/9XV7f/V1e3/1dXt/9XV7f/V1e3/1dX
        t/9XV7f/V1e3/1dXt/pYWLh9AAD/AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAV1e2W1dXt/9XV7f/V1e3/1dXt/9XV7f/V1e3/1dXt/9XV7f5V1e3+FdX
        t/9XV7f/V1e3/1dXt/9XV7f/V1e3/1dXt/9WVrerTU2zCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYWLdgV1e3/1dXt/9XV7f/V1e3/1dXt/9WVraFXFy4GQAA
        /wEAAAAAUFCvEFVVtzlYWLh9V1e31VdXt/9XV7f/V1e3/1dXt/9WVrerAAD/AQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhYt2BXV7f/V1e33ldXuO9XV7f/V1e3/1dX
        t2oAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAgIACVla2UFdXt+BXV7f/V1e3/1dXt/9YWLh9AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWFi3YFdXt7BbW7YOV1e33ldX
        t/9XV7f/V1e3agAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVVW7D1dXuK9XV7f/V1e3/1dX
        t/lVVbgkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABXV7YjZmbMBQAA
        AABXV7feV1e3/1dXt/9XV7dqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZmbMBVdX
        t7JXV7f/V1e3/1hYt6kAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFdXt95XV7f/V1e3/1dXt2oAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAW1u2DlZWt+NXV7f/V1e3/VVVtRgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAV1e33ldXt/9XV7f/V1e3agAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAV1e2W1dXt/9XV7f/V1e4ZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABXV7feV1e3/1dXt/9XV7dqAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgYL8IV1e471dXt/9XV7eqAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAQEC/BFdXt59YWLcgAAAAAAAAAAAAAAAAAAAAAFdXt95XV7f/V1e3/1dXt2oAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABXV7ivV1e3/1dXuMgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABXV7eVV1e3/1dXtuFVVbkhAAAAAAAAAAAAAAAAV1e33ldXt/9XV7f/V1e3agAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFdXtpBXV7f/V1e24QAA
        AAAAAAAAAAAAAAAAAAAAAAAAWFi3bldXt/9XV7f/V1e3/1dXt+BaWrUfAAAAAAAAAABXV7feV1e3/1dX
        t/9XV7dqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAV1e2kFdX
        t/9XV7fiAAAAAAAAAAAAAAAAAAAAAFdXtkZXV7f7V1e3/1dXt/9XV7f/V1e3/1dXttpYWLoaAAAAAFdX
        t95XV7f/V1e3/1dXt2oAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABXV7ivV1e3/1dXuMgAAAAAAAAAAAAAAABVVaoDVla4dlhYtndYWLjIV1e3/1dXt/dXV7hPWFi3Q1tb
        thwAAAAAV1e33ldXt/9XV7f/V1e3agAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAASUm2B1dXt+5XV7f/V1e3qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFdXuGxXV7f/V1e3/1hY
        t2AAAAAAAAAAAAAAAABXV7feV1e3/1dXt/9XV7dqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABYWLhaV1e3/1dXt/9WVrZlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWVm8F1dX
        t/pXV7f/V1e35FVVvwwAAAAAAAAAAFdXt95XV7f/V1e3/1dXt2oAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAATk6xDVZWt+NXV7f/V1e3/VVVtRgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAV1e2rFdXt/9XV7f/Vla3t2ZmzAUAAAAAV1e33ldXt/9XV7f/V1e3agAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGZmzAVWVrexV1e3/1dXt/9XV7eqAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABZWbkoV1e3+FdXt/9XV7f/V1e3sFpatBFXV7feV1e3/1dXt/9XV7dqAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVVbsPVla3rldXt/9XV7f/V1e3+lpauiUAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABXV7iBV1e3/1dXt/9XV7f/V1e24VdXt/BXV7f/V1e3/1dX
        t2oAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP8BV1e4T1dXt99XV7f/V1e3/1dXt/9WVrd/AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFVVqgNXV7etV1e3/1dXt/9XV7f/V1e3/1dX
        t/9XV7f/Vla2hVxcuBkAAP8BAAAAAE5OsQ1XV7Y4V1e2e1dXt9RXV7f/V1e3/1dXt/9XV7f/V1e3rQAA
        /wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAElJtgdXV7azV1e3/1dX
        t/9XV7f/V1e3/1dXt/9XV7f/V1e3/1dXt/lXV7f4V1e3/1dXt/9XV7f/V1e3/1dXt/9XV7f/V1e3/1dX
        t61NTbMKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICA
        gAJXV7Z7V1e3/FdXt/9XV7f/V1e3/1dXt/9XV7f/V1e3/1dXt/9XV7f/V1e3/1dXt/9XV7f/V1e3/1dX
        t/pYWLeAAAD/AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABXV7QpV1e3p1dXt/1XV7f/V1e3/1dXt/9XV7f/V1e3/1dXt/9XV7f/V1e3/1dX
        t/1WVrerV1e1JgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAW1u2HFhYt2ZXV7asV1e3y1dXt+RWVrfjV1e4yFdX
        tqxYWLdmXFy4GQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////////////gf///AA///gAH//wAAf/8D8D//B/w//0f+H//H
        /w//x/+P/8f/z//H/8f3x//H48f/x+HH/8fAx//H48f/x/PH/8/xx/+P8Mf/D/hH/h/4B/w//APwP/4A
        AH//gAD//8AD///4H/////////////////8=
</value>
  </data>
</root>